/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jframe;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Alberto
 */
public class Instrucciones extends javax.swing.JFrame {

    /**
     * Creates new form instrucciones
     */
    private List<String> l = new ArrayList<>();
    private List<String> listaNodes = new ArrayList();
    private int numIdioma;

    public Instrucciones(int num) {
        initComponents();
        numIdioma = num;
        if (numIdioma == 1) {
            textArea();
            titulo();
            jLabel1.setText(listaNodes.get(0));
            jButton1.setText(listaNodes.get(1));
        } else {
            textAreaIng();
            tituloIng();
            jLabel1.setText(listaNodes.get(0));
            jButton1.setText(listaNodes.get(1));
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (numIdioma == 1) {
            segundaPantalla s = new segundaPantalla(1);
            s.setVisible(true);
            this.setVisible(false);
        } else {
            segundaPantalla s = new segundaPantalla(2);
            s.setVisible(true);
            this.setVisible(false);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void textArea() {

        File f = new File("src\\text\\InstruccionesCat.txt");
        try {
            BufferedReader obj = new BufferedReader(new FileReader(f));
            String s = new String();
            String s2 = new String();
            while ((s = obj.readLine()) != null) {

                l.add(s);

            }
            obj.close();
            for (String string : l) {
                System.out.println(string);
                jTextArea1.setText(jTextArea1.getText() + "\n" + string);

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Instrucciones.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Instrucciones.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void titulo() {
        File f = new File("src\\xml\\Instruccions.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder;
        try {
            dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(f);
            doc.getDocumentElement().normalize();
            String s = doc.getDocumentElement().getNodeName();
            NodeList nList = doc.getElementsByTagName(s);
            for (int i = 0; i < nList.getLength(); i++) {
                Node node = nList.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element e = (Element) node;
                    if (e.hasChildNodes()) {
                        NodeList n1 = node.getChildNodes();
                        for (int j = 0; j < n1.getLength(); j++) {
                            Node nd = n1.item(j);
                            if (nd.getNodeType() == Node.ELEMENT_NODE) {
                                listaNodes.add(nd.getTextContent().trim());
                            }

                        }
                    }
                }

            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(segundaPantalla.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(segundaPantalla.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(segundaPantalla.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void textAreaIng() {
        File f = new File("src\\text\\ing.txt");
        try {
            BufferedReader obj = new BufferedReader(new FileReader(f));
            String s = new String();
            String s2 = new String();
            while ((s = obj.readLine()) != null) {

                l.add(s);

            }
            obj.close();
            for (String string : l) {
                System.out.println(string);
                jTextArea1.setText(jTextArea1.getText() + "\n" + string);

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Instrucciones.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Instrucciones.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void tituloIng() {
        File f = new File("src\\xml\\Instructions.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder;
        try {
            dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(f);
            doc.getDocumentElement().normalize();
            String s = doc.getDocumentElement().getNodeName();
            NodeList nList = doc.getElementsByTagName(s);
            for (int i = 0; i < nList.getLength(); i++) {
                Node node = nList.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element e = (Element) node;
                    if (e.hasChildNodes()) {
                        NodeList n1 = node.getChildNodes();
                        for (int j = 0; j < n1.getLength(); j++) {
                            Node nd = n1.item(j);
                            if (nd.getNodeType() == Node.ELEMENT_NODE) {
                                listaNodes.add(nd.getTextContent().trim());
                            }

                        }
                    }
                }

            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(segundaPantalla.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(segundaPantalla.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(segundaPantalla.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
